import json
from pathlib import Path

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
from loguru import logger

from data import config, dota2
from filters import UserCommand
from keyboards.pick_helper import get_ikb_wronghero, ikb_allowed_heroes, replace_hero_cb_data, remove_hero_cb_data
from loader import dp
from services.db_commands import subscription as db_sub
from services.db_commands import users as db_users
from states import WrongHeroState
from states.pick_states import WaitForHeroesState
from utils import split_words
from utils.dotabuff import find_counter_picks, check_valid_heroes, match_hero_name
from utils.exceptions import NotEnoughHeroesToAnalyze, WrongHero, TooManyHeroesToAnalyze
from utils.misc.throttling import rate_limit


@rate_limit(1, 'pick')
@dp.message_handler(UserCommand(), text="üëÄ –ö–æ–Ω—Ç—Ä–ø–∏–∫–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É")
@dp.message_handler(UserCommand(), commands=['pick', 'p'])
async def command_pick(message: types.Message, state: FSMContext):
    if not await db_sub.is_user_sub(message.from_user.id):
        pick_commands_left = await db_users.get_user_max_picks_per_day(user_id=message.from_user.id)
        if pick_commands_left <= 0:
            await message.answer('üôÅ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n'
                                 '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–æ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ')
            return

    if message.text == "üëÄ –ö–æ–Ω—Ç—Ä–ø–∏–∫–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É":
        user_heroes = []
    else:
        user_heroes = split_words(message.get_args())
    await proccess_pick_command(message, user_heroes, state)


async def proccess_pick_command(message: types.Message, heroes: list[str], state: FSMContext = None,
                                call: bool = False):
    try:
        if len(heroes) < 1:
            raise NotEnoughHeroesToAnalyze

        if len(heroes) > 5:
            raise TooManyHeroesToAnalyze

        heroes = [match_hero_name(hero) for hero in heroes]
        check_valid_heroes(heroes)
        counter_picks = find_counter_picks(heroes)
    except WrongHero as e:
        ikb = get_ikb_wronghero(str(e), heroes)
        if call:
            await message.edit_text(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–µ—Ä–æ–π ({e})\n"
                                    f"P.S. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è –≤ –æ–¥–Ω–æ–º "
                                    f"—Å–ª–æ–≤–µ.",
                                    reply_markup=ikb)
        else:
            await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–µ—Ä–æ–π ({e})\n"
                                 f"P.S. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è –≤ –æ–¥–Ω–æ–º —Å–ª–æ–≤–µ.",
                                 reply_markup=ikb)
    except NotEnoughHeroesToAnalyze:
        await state.set_state(WaitForHeroesState.heroes)
        if call:
            await message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç—Ä-–ø–∏–∫:",
                                    reply_markup=ikb_allowed_heroes)
        else:
            await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–∞ –≥–µ—Ä–æ–µ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç—Ä-–ø–∏–∫:",
                                 reply_markup=ikb_allowed_heroes)
    except TooManyHeroesToAnalyze:
        if call:
            await message.edit_text("–í—ã–±—Ä–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–∞–∫—Å–∏–º—É–º: 5")
        else:
            await message.answer("–í—ã–±—Ä–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–∞–∫—Å–∏–º—É–º: 5")
    except Exception as e:
        logger.error(f"{message.from_user.full_name} (@{message.from_user.username}) {message.text}"
                     f" | –û—à–∏–±–∫–∞ #001 | {e}")
        if call:
            await message.edit_text("–û—à–∏–±–∫–∞ #001: –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!!!")
        else:
            await message.answer("–û—à–∏–±–∫–∞ #001: –°–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!!!")
    else:
        logger.info(f"{message.from_user.full_name} (@{message.from_user.username}) /p Success! ({heroes})")
        counter_picks = list(
            filter(lambda pick: pick[1] > 0.0, sorted(counter_picks.items(), key=lambda x: x[1], reverse=True)))

        text = await create_answer(counter_picks, heroes, message.from_user.id)
        if call:
            await message.edit_text(text, parse_mode=ParseMode.HTML)
        else:
            await message.answer(text, parse_mode=ParseMode.HTML)

        if not await db_sub.is_user_sub(message.from_user.id):
            num = await db_users.get_user_max_picks_per_day(user_id=message.from_user.id) - 1
            await db_users.update_user_max_picks_per_day(user_id=message.from_user.id, num=num)


@dp.callback_query_handler(replace_hero_cb_data.filter())
async def replace_wrong_hero_callback(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    filename = callback_data['filename']
    path = Path(f"temp/pick/{filename}")
    try:
        with open(path, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        return
    path.unlink(True)
    wrong_name = data['wrong_name']
    heroes = data['heroes']

    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è:")
    await state.update_data(wrong_name=wrong_name)
    await state.update_data(heroes=heroes)
    await state.set_state(WrongHeroState.new_name)
    await WrongHeroState.new_name.set()


@dp.message_handler(state=WrongHeroState.new_name)
async def set_new_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.finish()
    wrong_name = data['wrong_name']
    heroes = data['heroes']
    replacement = message.text

    heroes = list(map(lambda x: x.replace(wrong_name, replacement), heroes))
    await proccess_pick_command(message, heroes)


@dp.callback_query_handler(remove_hero_cb_data.filter())
async def remove_wrong_hero_callback(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    filename = callback_data['filename']
    path = Path(f"temp/pick/{filename}")
    try:
        with open(path, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        return
    path.unlink(True)
    wrong_name = data['wrong_name']
    heroes = data['heroes']

    heroes.remove(wrong_name)
    await proccess_pick_command(call.message, heroes, state, call=True)


@dp.message_handler(state=WaitForHeroesState.heroes)
async def wait_for_heroes(message: types.Message, state: FSMContext):
    await state.finish()

    text = message.text.replace('/pick', '')
    if text == message.text:
        text = message.text.replace('/p', '')
    user_heroes = split_words(text)

    await proccess_pick_command(message, user_heroes, state)


async def create_answer(counter_picks: list, heroes: list, user_id: int) -> str:
    answer = ''

    picks_by_pos = [
        ['1', "Carry (pos 1)"],
        ['2', "Midlaner (pos 2)"],
        ['3', "Offlaner (pos 3)"],
        ['4', "Soft Supp (pos 4)"],
        ['5', "Hard Support (pos 5)"]
    ]

    for picks in picks_by_pos:
        best_picks = list(filter(
            lambda pick: any(pick[0] == data[1] and picks[0] in data[0] for data in dota2.heroes.values()),
            counter_picks))[:config.COUNTERPICK_NUM]
        if len(best_picks):
            answer += f"\n<i>–¢–æ–ø –∫–æ–Ω—Ç—Ä-–ø–∏–∫ {picks[1]}:</i>\n"
            for name, lose_rate in best_picks:
                answer += (f"<a href='https://t.me/{config.BOT_LINK[1:]}?start={match_hero_name(name)}'>{name}</a>: "
                           f"{round(lose_rate * 5, 2)}%\n")

    if len(answer):
        user_heroes = list(set(heroes))
        temp = []
        for url_name, data in dota2.heroes.items():
            if url_name in user_heroes:
                temp.append(f"<a href='https://t.me/{config.BOT_LINK[1:]}?start={url_name}'>{data[1].strip()}</a>")
        user_heroes = temp

        if not await db_sub.is_user_sub(user_id):
            picks_left = await db_users.get_user_max_picks_per_day(user_id=user_id) - 1
        else:
            picks_left = '‚àû'
        answer = ("<b>–í—ã–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä-–ø–∏–∫–æ–≤ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n" +
                  f"\n<i><b>–ö–æ–Ω—Ç—Ä-–ø–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤: {', '.join(user_heroes)}</b></i>\n" +
                  answer +
                  f"\n<i>‚ùï –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {picks_left} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.</i>")

    return answer

from aiogram import types

from filters import UserCommand
from keyboards.payment import get_ikb_payment
from loader import dp
import services.db_commands.subscription as db_sub
import services.db_commands.users as db_users
from utils import text
from utils.misc.throttling import rate_limit

SUBSCRIBTION_COST = 249


@rate_limit(1, 'profile')
@dp.message_handler(UserCommand(), text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@dp.message_handler(UserCommand(), commands=['profile'])
async def command_profile(message: types.Message):
    user_id = message.from_user.id

    if await db_sub.is_user_sub(user_id):
        date = await db_sub.sub_expires_date(user_id)
        sub_expires_date = '–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ' + date.strftime("%d/%m/%Y")
    else:
        sub_expires_date = '–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'

    created_at_date = await db_users.get_user_created_date(user_id)
    created_at = created_at_date.strftime("%d/%m/%Y")

    answer = text(
        f"üë§ –ò–º—è: {message.from_user.full_name}",
        f"üè∑ UID: {user_id}",
        "",
        f"üìÖ –ù–∞—á–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º: {created_at}",
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –±–æ—Ç—É: {await db_users.get_user_command_count(user_id)}",
        "",
        f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {await db_users.get_user_max_picks_per_day(user_id)}",
        f"üíµ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_expires_date}"
    )

    if not await db_sub.is_user_sub(user_id):
        await message.answer(answer, reply_markup=get_ikb_payment(SUBSCRIBTION_COST))
    else:
        await message.answer(answer)


@dp.callback_query_handler(text='payment')
async def callback_payment(call: types.CallbackQuery):
    await call.message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞')
